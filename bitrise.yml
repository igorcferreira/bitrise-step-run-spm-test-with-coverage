format_version: "4"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ""
app:
  envs:
  - BITRISE_STEP_ID: run-spm-test-with-coverage
  - BITRISE_STEP_VERSION: $BITRISE_GIT_TAG
  - BITRISE_STEP_GIT_CLONE_URL: https://github.com/igorcferreira/bitrise-step-run-spm-test-with-coverage.git
  - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
trigger_map:
- pull_request_source_branch: '*'
  pull_request_target_branch: main
  workflow: audit-this-step
- tag: '*'
  workflow: share-this-step
workflows:
  _configure_git:
    steps:
    - script:
        title: Config git user
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            git config --global user.name "${SHARE_ACTION_USER_NAME}"
            git config --global user.email "${SHARE_ACTION_USER_EMAIL}"
  audit-this-step:
    before_run:
    - test
    steps:
    - script:
        title: Audit Step
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml
  share-this-step:
    description: |-
      If this is the first time you try to share a Step you should
      first call: $ bitrise share

      This will print you a guide, and information about how Step sharing
      works. Please read it at least once!

      As noted in the Step sharing guide you'll have to fork the
      StepLib you want to share this step into. Once you're done with forking
      the repository you should set your own fork's git clone URL
      in the `.bitrise.secrets.yml` file, or here in the `envs` section,
      as the value of the `MY_STEPLIB_REPO_FORK_GIT_URL` environment.

      You're now ready to share this Step, just make sure that
      the `BITRISE_STEP_ID` and `BITRISE_STEP_VERSION`
      environments are set to the desired values!

      To share this Step into a StepLib you can just run: $ bitrise run share-this-step

      Once it finishes the only thing left is to actually create a Pull Request,
      the way described in the guide printed at the end of the process.
    before_run:
    - audit-this-step
    - _configure_git
    envs:
    - MY_STEPLIB_REPO_FORK_GIT_URL: $MY_STEPLIB_REPO_FORK_GIT_URL
    - BITRISE_STEP_ID: $BITRISE_STEP_ID
    - BITRISE_STEP_VERSION: $BITRISE_STEP_VERSION
    - BITRISE_STEP_GIT_CLONE_URL: $BITRISE_STEP_GIT_CLONE_URL
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            bitrise share start -c "${MY_STEPLIB_REPO_FORK_GIT_URL}"
            bitrise share create --stepid "${BITRISE_STEP_ID}" --tag "${BITRISE_STEP_VERSION}" --git "${BITRISE_STEP_GIT_CLONE_URL}"
            bitrise share finish
  test:
    steps:
    - activate-ssh-key@4:
        run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
    - git-clone@6: {}
    - change-workdir:
        title: Switch working dir to test / _tmp dir
        description: |-
          To prevent step testing issues, like referencing relative
          files with just './some-file' in the step's code, which would
          work for testing the step from this directory directly
          but would break if the step is included in another `bitrise.yml`.
        run_if: "true"
        inputs:
        - path: $BITRISE_SOURCE_DIR/_tmp
        - is_create_path: false
    - path::./git:
        title: Step Test
        description: ""
        inputs:
        - TEST_NAME: BitriseTest
        - PROJECT_DIR: $BITRISE_SOURCE_DIR
    - path::./git:
        title: Re-run Step Test without build
        description: ""
        inputs:
        - TEST_NAME: BitriseTestReRun
        - PROJECT_DIR: $BITRISE_SOURCE_DIR
        - SKIP_BUILD: 'YES'
    - path::./git:
        title: Run iOS test
        description: ""
        inputs:
        - TEST_NAME: BitriseTestiOS
        - PROJECT_DIR: $BITRISE_SOURCE_DIR
        - SKIP_BUILD: 'NO'
        - SDK: 'iphonesimulator'
        - DESTINATION: 'platform=iOS Simulator,name=iPhone 8 Plus'
    - script:
        title: Run step test
        inputs:
        - content: |
            #!/usr/bin/env bash

            if [ -f "${TEST_RESULT}" ]; then
              echo "Test result on ${TEST_RESULT}"
            else
              exit 1
            fi

            if [ -f "${CODE_COVERAGE_RESULT}" ]; then
              echo "Code coverage on ${CODE_COVERAGE_RESULT}"
            else
              exit 1
            fi
    - change-workdir:
        title: Switch working dir to base dir
        description: To prevent blocking other scripts, we return to the root folder.
        run_if: "true"
        inputs:
        - path: $BITRISE_SOURCE_DIR/..
        - is_create_path: false
    - deploy-to-bitrise-io@2: {}
